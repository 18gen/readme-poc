// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Project {
  id            String   @id @default(cuid())
  owner         String
  repo          String
  defaultBranch String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  envs          EnvironmentVariable[]
  builds        Build[]
  deployments   Deployment[]
  @@unique([owner, repo])
}

model EnvironmentVariable {
  id             String   @id @default(cuid())
  projectId      String
  key            String
  encryptedValue String
  createdAt      DateTime @default(now())
  updatedAt     DateTime @updatedAt
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@unique([projectId, key])
}

model Build {
  id        String      @id @default(cuid())
  projectId String
  branch    String
  status    BuildStatus @default(QUEUED)
  logs      String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deployment Deployment?
}

model Deployment {
  id         String           @id @default(cuid())
  projectId  String
  buildId    String?          @unique
  status     DeploymentStatus @default(PENDING)
  pid        Int?             // 子プロセスPID
  hostPort   Int?             // ローカルで割り当てたポート
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  project    Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  build      Build?           @relation(fields: [buildId], references: [id])
}

enum BuildStatus { 
  QUEUED 
  RUNNING 
  SUCCEEDED 
  FAILED 
}

enum DeploymentStatus { 
  PENDING 
  RUNNING 
  STOPPED 
  FAILED 
}
